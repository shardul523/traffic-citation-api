// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChallanStatus {
  ISSUED
  PAID
  DISMISSED
}

enum VehicleType {
  TWO_WHEELER
  THREE_WHEELER
  FOUR_WHEELER
  FOUR_WHEELER_HEAVY
}

model Challan {
  id                  Int           @id @default(autoincrement())
  issuedAt            DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  violation           String
  fineAmount          Float
  status              ChallanStatus
  image               String?
  Vehicle             Vehicle       @relation(fields: [vehicleLicensePlate], references: [licencePlate])
  vehicleLicensePlate String
  Officer             Officer?      @relation(fields: [officerId], references: [officerId])
  officerId           String

  @@map("challans")
}

model Vehicle {
  id           Int         @id @default(autoincrement())
  licencePlate String      @unique
  vehicleType  VehicleType @default(FOUR_WHEELER)
  challans     Challan[]
  User         User?       @relation(fields: [uid], references: [uid])
  uid          String?

  @@map("vehicles")
}

model User {
  id       Int       @id @default(autoincrement())
  uid      String    @unique
  email    String    @unique
  name     String
  password String
  vehicles Vehicle[]

  @@map("users")
}

model Officer {
  id        Int       @id @default(autoincrement())
  officerId String    @unique
  email     String    @unique
  name      String
  password  String
  challans  Challan[]

  @@map("officers")
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  @@map("admins")
}
